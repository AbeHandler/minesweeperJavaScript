<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Javascript Minesweeper</title>
    <meta charset="UTF-8" />
    <script type="text/JavaScript">
//<![CDATA[


    var gameMines = [];   //the IDs of the DIVs that hold mines     
    var discoveredMines = []; //all of the mines user has found at any point in the game

    //when the user clicks on a blank square, this array stores the
    //adjacent squares that need to get automatically checked for mines 
    var frontier = [];        

    /** Creates a game */  
    function writeRows(row, col) {
         generateMines(row, col);
         document.getElementById('game').innerHTML = ""; //reset the game
         discoveredMines = [];                           //reset the discovered mines
         var i =0;
         var gameHTML = "";
         for (i=0;i<row;i++){
             gameHTML = gameHTML + writeOneRow(col,i);
         }
         document.getElementById('game').innerHTML=gameHTML;
         var mines = document.getElementsByClassName("mine");
         for (i = 0; i < mines.length; i++) {
            mines[i].addEventListener("click", Mine);
            mines[i].addEventListener("contextmenu", labelAsMine);
         }
         var notMines = document.getElementsByClassName("notMine");
         for (i = 0; i < notMines.length; i++) {
            notMines[i].addEventListener("click", notMine);
            notMines[i].addEventListener("contextmenu", labelAsMine);
         }
    }

    /** Writes HTML for one row in the game */  
    function writeOneRow(numCols, rowIndex) {
         var string ="";
         var gameMinesCopy = gameMines;
         for (i=0;i<numCols;i++){
             var curID="c" + rowIndex+"-"+i;
             if (gameMines.indexOf("c" + rowIndex + "-" + i)==-1){ //square ids are stored in form: cRow-Col, as in c0-0 (top left square)
                 string= string + getCell(curID, false);
            }
             else{
                string= string + getCell(curID, true);      //this line is the mines
             }
         }
         
         return "<div class='gameRow' style=\"width:"+ 20 * numCols +"px\" >" + string + "<\/div>" ;
    }

    /** Writes HTML for one cell */
    function getCell(id, mine){
        if (mine) {
                return "<div class='cell mine' id='" + id + "' ><\/div>";
                }
        else{
                  return "<div class='cell notMine' id='" + id + "' ><\/div>";
       }
    }


    /** Sets the mines in the game */ 
    function generateMines(rows, cols){
    var size;
    if (rows==8){size=10;}
    if (rows==16){size=40;}
    if (rows==30){size=120;}
    gameMines=new Array();

    while (gameMines.length<size){
      var  newMine="c" + Math.ceil(Math.random()*(rows-1)) + "-" + Math.ceil(Math.random()*(cols-1));
      if (gameMines.indexOf(newMine)==-1){           //if not in the array
            gameMines.push(newMine);
      }
    }
    }

    /** Fires when user clicks a mine */ 
    function Mine(){
         alert("Game Over");
         location.reload();
    }

    /** Returns the IDs of the squares directly adjacent to the ID*/ 
    function getSurroundingIDs(id, includeDiagonals){
         var onesPlace = parseInt((id.split("-", 2)[0]).replace("c",""));
         var tensPlace = parseInt((id.split("-", 2)[1]));  //split on -, return 2 tokens
         var IDs = new Array();
         for (var row=onesPlace-1;row<=onesPlace+1;row++){
                 for (var col=tensPlace-1;col<=tensPlace+1;col++){
                    if (row>=0 && col>=0){IDs[IDs.length]="c" + row +"-"+ col};  //create IDs for all where row, col >0
                }
         }
         var index = IDs.indexOf(id);  //these lines remove the input ID from the output array
         IDs.splice(index, 1);
         if (!(includeDiagonals)){
            IDs = removeDiagonals(id, IDs)
         }
         
         IDs = removeNonexistentIDs(id, IDs); //the logic above might generate non-existent IDs. They have to be removed   
         return IDs;
    }

    /*Removes any IDs from array that do not exist*/
    function removeNonexistentIDs(id, IDs){
         for (var j=0;j<IDs.length;j++){
              var myElem = document.getElementById(IDs[j]);
              if (myElem == null){                      //if element does not exist
                 var index = IDs.indexOf(IDs[j]) ;     //then find the index of the id 
                 IDs.splice(index, 1);             //and pull it out of the array
                 }
         }
         return IDs;
    }


    //*takes an ring of IDs surround the ID and removes the IDs at each corner*/
    function removeDiagonals(id, IDs){

         var col = parseInt(id.split("-", 2)[1].replace("c","")); //split on -, return 2 tokens
         var row = parseInt(id.split("-", 2)[0].replace("c",""));
         var idCount = 0;

         var topRight = IDs.indexOf("c" + (row+1) + "-" + (col+1)) ; 
         var topLeft = IDs.indexOf("c" + (row+1) + "-" + (col-1)) ; 
         var bottomRight = IDs.indexOf("c" + (row-1) + "-" + (col+1)) ; 
         var bottomLeft = IDs.indexOf("c" + (row-1) + "-" + (col-1)) ; 
         if (topRight>-1){IDs.splice(topRight, 1);}
         if (topLeft>-1){IDs.splice(topLeft, 1);}
         if (bottomRight>-1){IDs.splice(bottomRight, 1);}
         if (bottomLeft>-1){IDs.splice(bottomLeft, 1);}
         
         return IDs;

    }

    /** How many mines are directly adjacent to the square? */ 
    function getCountOfSurroundingMines(id){
        var IDs = getSurroundingIDs(id, true);
        var count=0;
        for (var i=0; i<=IDs.length; i++){
             if(gameMines.indexOf(IDs[i])!=-1){count++;}
        }
        return count;
    }

    /** Determine what mine was clicked.*/ 
    function getID(e){
        //First determine what ID was clicked...
         //See http://www.quirksmode.org/js/introevents.html  
         var evt = e ? e:window.event;    //capture the window event
         var targ;          
         if (!e) var e = window.event;    //this code cancels the default context menu
         if (e.target) targ = e.target;
         else if (e.srcElement) targ = e.srcElement;
         var thisIDwasClicked;
         if(typeof targ === "undefined"){thisIDwasClicked=e;}
         else {thisIDwasClicked=targ.id;}
         return thisIDwasClicked;
    }

    /** Fires when user clicks on a non-mine.*/ 
    function notMine(e){
         var id=getID(e);   
         document.getElementById(id).style.backgroundColor="white";  //now the ID is known. Turn square white
         if (getCountOfSurroundingMines(id)>0){
                 document.getElementById(id).innerHTML=getCountOfSurroundingMines(id);
         }
         else{
         var IDs = getSurroundingIDs(id, false);
         for (var i=0; i<IDs.length; i++){
                  if(getCountOfSurroundingMines(IDs[i])=="0"){
                         if (gameMines.indexOf(IDs[i])==-1){
                                 if (frontier.indexOf(IDs[i])==-1){        //don't repeat elements on the frontier
                                    if (!(document.getElementById(IDs[i]).style.backgroundColor=="white")) //don't add the already explored items
                                        {frontier.push(IDs[i]);} //this needs to be enqued
                                }
                         }
                  }
                  else{
                             if (gameMines.indexOf(IDs[i])==-1){                                  
                                     document.getElementById(IDs[i]).innerHTML=getCountOfSurroundingMines(IDs[i]);
                                     document.getElementById(IDs[i]).style.background="white";
                                 }
                  }
         }
                 if (frontier.length>0){
                        notMine(frontier.pop());     //perform another round of breadth-first search on the front item in the frontier
                 }
                 }
    }

    /*this code cancels the default action from the browser. In this case, the context menu*/
    //See http://www.javascripter.net/faq/eventpreventdefault.htm
    function cancelDefaultAction(e) {
         var evt = e ? e:window.event;
         if (evt.preventDefault) evt.preventDefault();
         evt.returnValue = false;
         return false;
    }

    //Need to do a lot to cancel the default context menu.
    //See http://www.quirksmode.org/js/introevents.html   
    function labelAsMine(e){  
        var id = getID(e);
        if (document.getElementById(id).style.backgroundColor=="white"){  //can't label discovered square as mine
                return cancelDefaultAction(evt);
        }
        if (discoveredMines.indexOf(id)==-1){
                document.getElementById(id).style.backgroundColor="red";
                if (discoveredMines.indexOf(targ)==-1){  //can't discover the same mine twice
                        discoveredMines.push(id);
                }
        }
        else {
                document.getElementById(id).style.backgroundColor="grey";  //mine is undiscovered  //todo find out how to remove it
                var myCopy = discoveredMines;
                var index = discoveredMines.indexOf(id);
                discoveredMines.splice(index, 1);
        }
        
        checkForWin();
        return cancelDefaultAction(evt);
    }

    /*called after user IDs a mine by left clicking. Determines if game is over*/
    function checkForWin(){
        
        if (discoveredMines.length==gameMines.length){  //only check if arrays are same length
                for (var i=0; i<gameMines.length; i++){
                        var gameMinesCopy = gameMines;
                        var myDisMinesCopy = discoveredMines;
                        if (discoveredMines.indexOf(gameMines[i])==-1){
                                return false;
                        }
                }
                alert("You win!");
                location.reload();
        }
        
    }

    //]]>
    </script>
    <style type="text/css">
/*<![CDATA[*/
    #gamePanel{width:800px;border:1px; border-color:black; border-style:solid; margin-right:auto;margin-left:auto; }
    #game {width:800px;height:360px;margin-top:7px}
    #controls {border-top:1px; border-color:black; border-top-style:solid}
    #buttons {width:460px; margin-right:auto;margin-left:auto;}
    .gameRow {margin-left:auto; margin-right:auto; text-align:center; height:21px; margin-top:-4px; margin-bottom:-4px; }
    .cell{float:left; background-Color:grey; border-color:black; border-style:solid; height:15px; border-width:1px; width: 15px; }
    .button{background-Color: white;border: 1px solid #bbb;border-radius: 3px;color: grey; font: bold 12px "helvetica neue", helvetica, arial, sans-serif; line-height: 1;padding: 8px 0 9px;text-align: center;width: 150px; }
    /*]]>*/
    </style>
</head>

<body>
    <div id='wholePage'>
        <div id='gamePanel'>
            <div id='top'>
                <div id='game'></div>
            </div>

            <div id='controls'>
                <div id='buttons'>
                    <button class='button' onclick=
                    "javascript:writeRows(8,8);return false;">Small</button>
                    <button class='button' onclick=
                    "javascript:writeRows(16,16);return false;">Medium</button>
                    <button class='button' onclick=
                    "javascript:writeRows(16,30);return false;">Large</button>
                </div>
            </div>
        </div>
    </div>
</body>
</html>