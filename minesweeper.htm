<!DOCTYPE html>

<html>

<head>

<title>Javascript Minesweeper</title>
<meta charset="UTF-8">
<script type="text/JavaScript">

var frontier = [];
var discoveredMines = [];
var myMines = [];

function getOnClick(id){
	return "onclick='javascript:notMine(\"" + id + "\");'";
}

function getID(id){
	return "id='" + id + "'";
}

function getOnContextMenu(id){
	return "oncontextmenu=\"javascript:labelAsMine()\"";
}

function getCell(id, mine){
	if (mine) {
		return "<div class='cell'" + getID(id) + " " + getOnContextMenu(id) + " onclick=\"javascript:Mine()\"></div>";
		}
	else{
		return "<div class='cell'" + getID(id) + " " + getOnContextMenu(id) + " onclick=\"javascript:notMine('" + id + "')\"></div>";
	}
}

function writeOneRow(num, rowIndex) {
         var string ="";
         for (i=0;i<num;i++){
             var curID="c" + rowIndex+"-"+i;
             if (myMines.indexOf(rowIndex + "-" + i)==-1){
                 string= string + getCell(curID, false);
            }
             else{
                string= string + getCell(curID, true);      //this line is the mines
             }
         }
         return "<div style=\"width:"+ 20 * num +"\" class='gameRow';>" + string + "</div>" ;
 }


function Mine(){
         alert("Game Over");
         window.location.reload();
}

function getSurroundingIDs(id){
         var onesPlace = parseInt((id.split("-", 2)[0]).replace("c",""));
         var tensPlace = parseInt((id.split("-", 2)[1]));  //split on -, return 2 tokens
         var IDs = new Array();
         for (var row=onesPlace-1;row<=onesPlace+1;row++){
        	 for (var col=tensPlace-1;col<=tensPlace+1;col++){
         		 if(document.getElementById("c" + row + "-" + col)){ //if the ID exists
         		 	if (!("c" + row+"-"+col == id)) {IDs[IDs.length]="c" + row+"-"+col;}
         		 }
         	}
         }
	     return IDs;
}


function getCountOfSurroundingMines(id){
        var IDs = getSurroundingIDs(id);
        var count=0;
        for (var i=0; i<=IDs.length; i++){
             if(myMines.indexOf(IDs[i])!=-1){count++;}
        }
        return count;
}

function writeRows(row, col) {
		 generateMines(row, col);
		 document.getElementById('game').innerHTML = ""; //reset the game
         var i =0;
         var gameHTML = "";
         for (i=0;i<row;i++){
             gameHTML = gameHTML + writeOneRow(col,i);
         }
         document.getElementById('game').innerHTML=gameHTML;
         setNumbers(row, col);
}

function setNumbers(row, col){
         for (var i=0; i<row; i++){
             for (var j=0; j<col; j++){
             var id = "c" + i+"-"+j ;
                 if (myMines.indexOf(id)!=-1){
                      document.getElementById(id).innerHTML="m";
                 }
                 else{
                      document.getElementById(id).innerHTML=""+ getCountOfSurroundingMines(id)+"";
                 }
             }
         }
}


function generateMines(rows, cols){
   var size;
   if (rows==8){size=10;}
   if (rows==16){size=40;}
   if (rows==30){size=120;}
   myMines=new Array();
/*   myMines[myMines.length]="c3-1";
   myMines[myMines.length]="c2-7";
   myMines[myMines.length]="c3-7";
   myMines[myMines.length]="c4-5";
   myMines[myMines.length]="c5-5";
   myMines[myMines.length]="c6-5";
   myMines[myMines.length]="c6-6";
   myMines[myMines.length]="c7-7";*/
   while (myMines.length<size){
      var  newMine="c" + Math.ceil(Math.random()*(rows-1)) + "-" + Math.ceil(Math.random()*(cols-1));
      if (myMines.indexOf(newMine)==-1){           //if not in the array
            myMines.push(newMine);
      }
   }
   var myMinesCopy=myMines;
}


function notMine(id){
         document.getElementById(id).style.background="white";
         var IDs = getSurroundingIDs_NoDiag(id);
         for (var i=0; i<IDs.length; i++){
                  if(getCountOfSurroundingMines(IDs[i])=="0"){
                      	 if (document.getElementById(IDs[i]).innerHTML!="m"){
                        	 frontier.push(IDs[i]); //this needs to be enqued
                         }
                  }
                  else{
              		    if (document.getElementById(IDs[i]).innerHTML!="m"){
                 		     document.getElementById(IDs[i]).innerHTML=getCountOfSurroundingMines(IDs[i]);
                 		}
                  }
         }
		 if (frontier.length>0){
		 	notMine(frontier.pop());     //perform another round of breadth-first search on the front item in the frontier
		 }
}


//http://www.javascripter.net/faq/eventpreventdefault.htm
function cancelDefaultAction(e) {
	 var evt = e ? e:window.event;
 	 if (evt.preventDefault) evt.preventDefault();
	 evt.returnValue = false;
 	 return false;
}

//Need to do a lot to cancel the default context menu.
//See http://www.quirksmode.org/js/introevents.html   
function labelAsMine(e){  
	var evt = e ? e:window.event;    //capture the window event
	var targ;          
	if (!e) var e = window.event;    //this code cancels the default context menu
	if (e.target) targ = e.target;
	else if (e.srcElement) targ = e.srcElement;
	if (targ.nodeType == 3)         // for a Safari bug
		targ = targ.parentNode;
	if (discoveredMines.indexOf(targ)==-1){
		document.getElementById(targ.id).style.background="red";
	}
	else {
		document.getElementById(targ.id).style.background="white";  //mine is undiscovered  //todo find out how to remove it
	}
	
	if (myMines.indexOf(targ)==-1){
		if (discoveredMines.indexOf(targ)==-1){  //can't discover the same mine twice
			discoveredMines.push(targ.id);
		}
	}
	
	checkForWin();
	return cancelDefaultAction(evt);
}

function checkForWin(){
	
	if (discoveredMines.length==myMines.length){
		for (var i=0; i<myMines.length; i++){
			var myMinesCopy = myMines;
			var myDisMinesCopy = discoveredMines;
			if (discoveredMines.indexOf(myMines[i])==-1){
				return false;
			}
		}
		alert("You win!");
		location.reload();
	}
	
}

function getSurroundingIDs_NoDiag(id){
         var col = parseInt(id.split("-", 2)[1].replace("c","")); //split on -, return 2 tokens
         var row = parseInt(id.split("-", 2)[0].replace("c",""));
         var IDs = new Array();
         var idCount = 0;
          
         if(document.getElementById("c" + (row+1) + "-" + col)){                            //if the element exists
         	if (document.getElementById("c" + (row+1) + "-" + col).style.background!="white"){   //white nodes have been explored
          	   IDs[idCount]= "c" + (row+1) + "-" + col ; 
           	   idCount++;
        	 }    
         }
         if(document.getElementById("c" +(row-1) + "-" + col)){ 
        	 if (document.getElementById("c" + (row-1) + "-" + col).style.background!="white"){   //white nodes have been explored
        	     IDs[idCount]= "c" + (row-1) + "-" + col ; 
         	    idCount++;
        	 } 
         }
         if(document.getElementById("c" + row + "-" + (col-1))){ 
         	if (document.getElementById("c" + row + "-" + (col-1)).style.background!="white"){   //white nodes have been explored
           	     IDs[idCount]= "c" + row + "-" + (col-1) ; 
           	     idCount++;
        	 }         
         }
         if(document.getElementById("c" + row + "-" + (col+1))){ 
        	 if (document.getElementById("c" + row + "-" + (col+1)).style.background!="white"){   //white nodes have been explored
            	 IDs[idCount]= "c" + row + "-" + (col+1); 
            	 idCount++;
         	}
         }
         return IDs;
}

</script>

<style type="text/css">
#gamePanel{width:518px;border:1px; border-color:black; border-style:solid; margin-right:auto;margin-left:auto; }
#game {width:518px;height:360px;}
#controls {border-top:1px; border-color:black; border-top-style:solid}
#buttons {width:460px; margin-right:auto;margin-left:auto;}
.gameRow {margin-left:auto; margin-right:auto; border-style:solid; text-align:center; border-color:white; border-width:1px; height:20px;}
.cell{float:left; background-color:grey; border-style:solid; border-width:1px; height:15px; width: 15px}
.button{
  background: white;
  border: 1px solid #bbb;
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  border-radius: 3px;
  -webkit-box-shadow: inset 0 0 1px 1px #f6f6f6;
  -moz-box-shadow: inset 0 0 1px 1px #f6f6f6;
  box-shadow: inset 0 0 1px 1px #f6f6f6;
  color: grey;
  font: bold 12px "helvetica neue", helvetica, arial, sans-serif;
  line-height: 1;
  padding: 8px 0 9px;
  text-align: center;
  text-shadow: 0 1px 0 #fff;
  width: 150px; }
  button.minimal:hover {
    background: #d9d9d9;
    -webkit-box-shadow: inset 0 0 1px 1px #eaeaea;
    -moz-box-shadow: inset 0 0 1px 1px #eaeaea;
    box-shadow: inset 0 0 1px 1px #eaeaea;
    color: white;
    cursor: pointer; }
  button.minimal:active {
    background: white;
    -webkit-box-shadow: inset 0 0 1px 1px #e3e3e3;
    -moz-box-shadow: inset 0 0 1px 1px #e3e3e3;
    box-shadow: inset 0 0 1px 1px #e3e3e3;
    color: #white; }
</style>

</head>


<body>

<div id='wholePage'>

	<div id='gamePanel'>

		<div id='top'>

			<div id='game'>

			</div>
		
		</div>
		<div id='controls'>
			<div id='buttons'>
				<button class='button' onclick="javascript:writeRows(8,8);return false;">Small</button> 
				<button class='button' onclick="javascript:writeRows(16,16);return false;">Medium</button>
				<button class='button' onclick="javascript:writeRows(16,30);return false;">Large</button>
			</div>
		</div>

		
	</div>

</div>

</body>
</html>