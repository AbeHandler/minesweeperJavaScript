<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta name="generator" content=
  "HTML Tidy for Linux/x86 (vers 25 March 2009), see www.w3.org" />

  <title>Javascript Minesweeper</title>
  <meta charset="UTF-8" />
  <script type="text/JavaScript">
//<![CDATA[

  var frontier = [];
  var discoveredMines = [];
  var myMines = [];

  /** Returns HTML to handle the onClick event */	
  function getOnClick(id){
  	   return "onclick='javascript:notMine();'";
      //  return "onclick='javascript:notMine(\"" + id + "\");'";
  }
  
  /** Returns HTML to set the ID */	
  function getID(id){
        return "id='" + id + "'";
  }

  /** Returns HTML to set the onContextMenu event */	
  function getOnContextMenu(id){
        return "oncontextmenu=\"javascript:labelAsMine()\"";
  }

  function getCell(id, mine){
        if (mine) {
                return "<div class='cell'" + getID(id) + " " + getOnContextMenu(id) + " onclick=\"javascript:Mine()\"><\/div>";
                }
        else{
                return "<div class='cell'" + getID(id) + " " + getOnContextMenu(id) + " onclick=\"javascript:notMine('" + id + "')\"><\/div>";
        }
  }

  function writeOneRow(num, rowIndex) {
         var string ="";
         var myMinesCopy = myMines;
         for (i=0;i<num;i++){
             var curID="c" + rowIndex+"-"+i;
             if (myMines.indexOf("c" + rowIndex + "-" + i)==-1){
                 string= string + getCell(curID, false);
            }
             else{
                string= string + getCell(curID, true);      //this line is the mines
             }
         }
         return "<div style=\"width:"+ 17 * num +"px\" class='gameRow'>" + string + "<\/div>" ;
  }


  function Mine(){
         alert("Game Over");
         window.location.reload();
  }

  function getSurroundingIDs(id){
         var onesPlace = parseInt((id.split("-", 2)[0]).replace("c",""));
         var tensPlace = parseInt((id.split("-", 2)[1]));  //split on -, return 2 tokens
         var IDs = new Array();
         for (var row=onesPlace-1;row<=onesPlace+1;row++){
                 for (var col=tensPlace-1;col<=tensPlace+1;col++){
                         if(document.getElementById("c" + row + "-" + col)){ //if the ID exists
                                if (!("c" + row+"-"+col == id)) {IDs[IDs.length]="c" + row+"-"+col;}
                         }
                }
         }
             return IDs;
  }


  function getCountOfSurroundingMines(id){
        var IDs = getSurroundingIDs(id);
        var count=0;
        for (var i=0; i<=IDs.length; i++){
             if(myMines.indexOf(IDs[i])!=-1){count++;}
        }
        return count;
  }

  function writeRows(row, col) {
                 generateMines(row, col);
                 document.getElementById('game').innerHTML = ""; //reset the game
         var i =0;
         var gameHTML = "";
         for (i=0;i<row;i++){
             gameHTML = gameHTML + writeOneRow(col,i);
         }
         document.getElementById('game').innerHTML=gameHTML;
      //   setNumbers(row, col);   for debugging
  }

  function generateMines(rows, cols){
   var size;
   if (rows==8){size=10;}
   if (rows==16){size=40;}
   if (rows==30){size=120;}
   myMines=new Array();
   while (myMines.length<size){
      var  newMine="c" + Math.ceil(Math.random()*(rows-1)) + "-" + Math.ceil(Math.random()*(cols-1));
      if (myMines.indexOf(newMine)==-1){           //if not in the array
            myMines.push(newMine);
      }
   }
  }

  //Need to do a lot to cancel the default context menu.
  //See http://www.quirksmode.org/js/introevents.html  
  function notMine(e){
         var id = e;
         document.getElementById(id).style.background="white";
         if (getCountOfSurroundingMines(id)>0){
                 document.getElementById(id).innerHTML=getCountOfSurroundingMines(id);
         }
         else{
         var IDs = getSurroundingIDs_NoDiag(id);
         for (var i=0; i<IDs.length; i++){
                  if(getCountOfSurroundingMines(IDs[i])=="0"){
                         if (myMines.indexOf(IDs[i])==-1){
                                 frontier.push(IDs[i]); //this needs to be enqued
                         }
                  }
                  else{
                             if (myMines.indexOf(IDs[i])==-1){                                  
                                     document.getElementById(IDs[i]).innerHTML=getCountOfSurroundingMines(IDs[i]);
                                     document.getElementById(IDs[i]).style.background="white";
                                 }
                  }
         }
                 if (frontier.length>0){
                        notMine(frontier.pop());     //perform another round of breadth-first search on the front item in the frontier
                 }
                 }
  }


  //http://www.javascripter.net/faq/eventpreventdefault.htm
  function cancelDefaultAction(e) {
         var evt = e ? e:window.event;
         if (evt.preventDefault) evt.preventDefault();
         evt.returnValue = false;
         return false;
  }

  //Need to do a lot to cancel the default context menu.
  //See http://www.quirksmode.org/js/introevents.html   
  function labelAsMine(e){  
        var evt = e ? e:window.event;    //capture the window event
        var targ;          
        if (!e) var e = window.event;    //this code cancels the default context menu
        if (e.target) targ = e.target;
        else if (e.srcElement) targ = e.srcElement;
        if (targ.nodeType == 3)         // for a Safari bug
                targ = targ.parentNode;
        if (document.getElementById(targ.id).style.background=="white"){  //can't label discovered square as mine
                return cancelDefaultAction(evt);
        }
        if (discoveredMines.indexOf(targ.id)==-1){
                document.getElementById(targ.id).style.background="red";
                if (discoveredMines.indexOf(targ)==-1){  //can't discover the same mine twice
                        discoveredMines.push(targ.id);
                }
        }
        else {
                document.getElementById(targ.id).style.background="grey";  //mine is undiscovered  //todo find out how to remove it
                var myCopy = discoveredMines;
                var index = discoveredMines.indexOf(targ.id);
                discoveredMines.splice(index, 1);
        }
        
        checkForWin();
        return cancelDefaultAction(evt);
  }

  function checkForWin(){
        
        if (discoveredMines.length==myMines.length){
                for (var i=0; i<myMines.length; i++){
                        var myMinesCopy = myMines;
                        var myDisMinesCopy = discoveredMines;
                        if (discoveredMines.indexOf(myMines[i])==-1){
                                return false;
                        }
                }
                alert("You win!");
                location.reload();
        }
        
  }

  function getSurroundingIDs_NoDiag(id){
         var col = parseInt(id.split("-", 2)[1].replace("c","")); //split on -, return 2 tokens
         var row = parseInt(id.split("-", 2)[0].replace("c",""));
         var IDs = new Array();
         var idCount = 0;
          
         if(document.getElementById("c" + (row+1) + "-" + col)){                            //if the element exists
                if (document.getElementById("c" + (row+1) + "-" + col).style.background!="white"){   //white nodes have been explored
                   IDs[idCount]= "c" + (row+1) + "-" + col ; 
                   idCount++;
                 }    
         }
         if(document.getElementById("c" +(row-1) + "-" + col)){ 
                 if (document.getElementById("c" + (row-1) + "-" + col).style.background!="white"){   //white nodes have been explored
                     IDs[idCount]= "c" + (row-1) + "-" + col ; 
                    idCount++;
                 } 
         }
         if(document.getElementById("c" + row + "-" + (col-1))){ 
                if (document.getElementById("c" + row + "-" + (col-1)).style.background!="white"){   //white nodes have been explored
                     IDs[idCount]= "c" + row + "-" + (col-1) ; 
                     idCount++;
                 }         
         }
         if(document.getElementById("c" + row + "-" + (col+1))){ 
                 if (document.getElementById("c" + row + "-" + (col+1)).style.background!="white"){   //white nodes have been explored
                 IDs[idCount]= "c" + row + "-" + (col+1); 
                 idCount++;
                }
         }
         return IDs;
  }

  //]]>
  </script>
  <style type="text/css">
/*<![CDATA[*/
  #gamePanel{width:518px;border:1px; border-color:black; border-style:solid; margin-right:auto;margin-left:auto; }
  #game {width:518px;height:360px;margin-top:7px}
  #controls {border-top:1px; border-color:black; border-top-style:solid}
  #buttons {width:460px; margin-right:auto;margin-left:auto;}
  .gameRow {margin-left:auto; margin-right:auto; text-align:center; height:20px;margin-top:-3px}
  .cell{float:left; background-color:grey; border-style:solid; border-width:1px; height:15px; width: 15px; }
  .button{
  background: white;
  border: 1px solid #bbb;
  border-radius: 3px;
  color: grey;
  font: bold 12px "helvetica neue", helvetica, arial, sans-serif;
  line-height: 1;
  padding: 8px 0 9px;
  text-align: center;
  width: 150px; }
  /*]]>*/
  </style>
</head>

<body>
  <div id='wholePage'>
    <div id='gamePanel'>
      <div id='top'>
        <div id='game'></div>
      </div>

      <div id='controls'>
        <div id='buttons'>
          <button class='button' onclick=
          "javascript:writeRows(8,8);return false;">Small</button> <button class='button'
          onclick="javascript:writeRows(16,16);return false;">Medium</button>
          <button class='button' onclick=
          "javascript:writeRows(16,30);return false;">Large</button>
        </div>
      </div>
    </div>
  </div>
</body>
</html>
