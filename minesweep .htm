<html>

<head>

<script type="text/JavaScript">

var frontier = [];

//1.0
function writeOneRow(num, rowIndex) {
     
         var start = "<div onclick='javascript:notMine(\"";
         var start2= "\");return false;' style='float:left; background-color:grey; border-style:solid; border-width:1px; height:15px; width: 15px' id='";
	     var startMine = "<div  onclick=\"javascript:Mine();return false;\" oncontextmenu=\"javascript:labelAsMine('"
         var endMine = "')\";return false; style='float:left; background-color:grey; border-style:solid; border-width:1px; height:15px; width: 15px'; id='";
         var end="'></div>";
         var string ="";
         for (i=0;i<num;i++){
             var curID=rowIndex+"-"+i;
             if (myMines.indexOf(rowIndex + "-" + i)==-1){
                 string= string+ start + curID + start2 + curID + end;
             }
             else{
                string= string+ startMine + curID + endMine + curID + end;       //this line is the mines
             }
         }
         return "<div style='border-style:solid; text-align:center; border-color:white; border-width:1px; height:20px;'>" + string + "</div>" ;
 }


function Mine(){
         alert("Game Over");
         window.location.reload();
}

function getSurroundingIDs(id){
         var onesPlace = parseInt(id.split("-", 2)[0]);
         var tensPlace = parseInt(id.split("-", 2)[1]);  //split on -, return 2 tokens
         var IDs = new Array();
         for (var row=onesPlace-1;row<=onesPlace+1;row++){
        	 for (var col=tensPlace-1;col<=tensPlace+1;col++){
         		 if(document.getElementById(row + "-" + col)){IDs[IDs.length]=row+"-"+col;}
         	}
         }
	 return IDs;
}


function getCountOfSurroundingMines(id){
        var IDs = getSurroundingIDs(id);
        var count=0;
        for (var i=0; i<=IDs.length; i++){
             if(myMines.indexOf(IDs[i])!=-1){count++;}
        }
        return count;
}

function writeRows(loop) {
		 document.getElementById('game').innerHTML = ""; //reset the game
         generateMines(loop);
         var i =0;
         var gameHTML = "";
         for (i=0;i<loop;i++){
             gameHTML = gameHTML + writeOneRow(loop,i);
         }
         document.getElementById('game').innerHTML=gameHTML;
         setNumbers(loop);
}

function setNumbers(dimension){
         for (var i=0; i<dimension; i++){
             for (var j=0; j<dimension; j++){
                 if (myMines.indexOf(i+"-"+j)!=-1){
                      document.getElementById(i+"-"+j).innerHTML="m";
                 }
                 else{
                      document.getElementById(i+"-"+j).innerHTML=""+ getCountOfSurroundingMines(i+"-"+j)+"";
                 }
             }
         }
}


function generateMines(dimension){
   var size = Math.floor(.15625*dimension*dimension);
   myMines=new Array();
 /*useful for debugging 
   myMines[myMines.length]="1-7";
   myMines[myMines.length]="2-5";
   myMines[myMines.length]="3-5";
   myMines[myMines.length]="3-7";
   myMines[myMines.length]="4-8";
   myMines[myMines.length]="6-1";
   myMines[myMines.length]="6-6";
   myMines[myMines.length]="6-9";
   myMines[myMines.length]="8-9";
   myMines[myMines.length]="9-9";*/
   while (myMines.length<size){
      var  newMine=Math.ceil(Math.random()*dimension) + "-" + Math.ceil(Math.random()*dimension);
      if (myMines.indexOf(newMine)==-1){           //if not in the array
            myMines[myMines.length]=newMine;
      }
   }
  
}


function notMine(id){
		// frontier.push(id);
         document.getElementById(id).style.background="white";
         var IDs = getSurroundingIDs_NoDiag(id);
         for (var i=0; i<IDs.length; i++){
                  if(getCountOfSurroundingMines(IDs[i])=="0"){
                      	 if (document.getElementById(IDs[i]).innerHTML!="m"){
                        	 frontier.push(IDs[i]); //this needs to be enqued
                         }
                  }
                  else{
              		    if (document.getElementById(IDs[i]).innerHTML!="m"){
                 		     document.getElementById(IDs[i]).innerHTML=getCountOfSurroundingMines(IDs[i]);
                 		}
                  }
         }
      //   var item = frontier.pop();      //all squares that can be explored have been added to the frontier
		 if (frontier.length>0){
		 	notMine(frontier.pop());     //perform another round of breadth-first search on the front item in the frontier
		 }
}

function labelAsMine(id){
	document.getElementById(id).style.background="red";
}

function getSurroundingIDs_NoDiag(id){
         var col = parseInt(id.split("-", 2)[1]); //split on -, return 2 tokens
         var row = parseInt(id.split("-", 2)[0]);
         var IDs = new Array();
         var idCount = 0;
          
         if(document.getElementById((row+1) + "-" + col)){                            //if the element exists
         	if (document.getElementById((row+1) + "-" + col).style.background!="white"){   //white nodes have been explored
          	   IDs[idCount]= (row+1) + "-" + col ; 
           	   idCount++;
        	 }    
         }
         if(document.getElementById((row-1) + "-" + col)){ 
        	 if (document.getElementById((row-1) + "-" + col).style.background!="white"){   //white nodes have been explored
        	     IDs[idCount]= (row-1) + "-" + col ; 
         	    idCount++;
        	 } 
         }
         if(document.getElementById(row + "-" + (col-1))){ 
         	if (document.getElementById(row + "-" + (col-1)).style.background!="white"){   //white nodes have been explored
           	     IDs[idCount]= row + "-" + (col-1) ; 
           	     idCount++;
        	 }         
         }
         if(document.getElementById(row + "-" + (col+1))){ 
        	 if (document.getElementById(row + "-" + (col+1)).style.background!="white"){   //white nodes have been explored
            	 IDs[idCount]= row + "-" + (col+1); 
            	 idCount++;
         	}
         }
         return IDs;
}

</script>
</head>
<body>

<div id='wholePage'>

	<div id='gamePanel'>

		<div id='game'>

		</div>

		<div id='controls'>
			<div id='buttons'>
				<button onclick="javascript:writeRows(10);return false;">Small</button> 
				<button onclick="javascript:writeRows(15);return false;">Medium</button>
				<button onclick="javascript:writeRows(20);return false;">Large</button>
			</div>
		</div>

	</div>

</div>

</body>
</html>